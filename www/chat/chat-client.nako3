appidは「chat」
wsidは空
nickは空
最終受信日時は0
WSアドレスは空
もし、WINDOW["location"]["host"]が「https:」ならば、
　WSアドレスは「wss://{WINDOW["location"]["host"]}/」
違えば、
　WSアドレスは「ws://{WINDOW["location"]["host"]}/」
ここまで
WS受信時には
　　最終受信日時は「Date.now()」をJS実行
　　Jデータは対象をJSONデコード
　　Jデータ["type"]で条件分岐
　　　「syn」ならば、
　　　　wsidはJデータ["data"]["wsid"]
　　　　{type:"syn", data:NULL}をコマンド送信。
　　　ここまで
　　　「ping」ならば、
　　　　{type:"pong", data:NULL}をコマンド送信。
　　　ここまで
　　　「pong」ならば、
　　　　# なにもしない。
　　　ここまで
　　　「msg」ならば、
　　　　「#logs」のテキスト取得して、Lに代入。
　　　　L=Jデータ["data"]＆改行＆L。
　　　　「#logs」へLをテキスト設定。
　　　ここまで
　　　「backlog」ならば、
　　　　logsはJデータ["data"]
　　　　logsを配列逆順する。
　　　　Lはlogsを改行で配列結合する。
　　　　「#logs」へLをテキスト設定。
　　　ここまで
　　ここまで
ここまで
WSアドレスへWS接続。
最終受信日時は「Date.now()」をJS実行
「#sendButton」をクリックした時には
　　F名前=「#name」のテキスト取得。
　　もし、F名前が空ならば、
　　　戻る
　　ここまで
　　もし、nickが空ならば、
　　　{type:"backlog", data:NULL}をコマンド送信。
　　ここまで
　　もし、F名前≠nickならば、
　　　nickはF名前
　　　{type:"nick", data:F名前}をコマンド送信。
　　ここまで
　　F内容=「#msg」のテキスト取得。
　　もし、F内容が空ならば、
　　　戻る
　　ここまで
　　{type:"msg", data:F内容}をコマンド送信。
　　「#msg」に空をテキスト設定
ここまで。

●(Oを)コマンド送信とは
　MSGは{
　　app: appid,
　　wsid: wsid,
　　type: O["type"],
　　data: O["data"]
　}
　MSGをJSONエンコードをWS送信
ここまで
