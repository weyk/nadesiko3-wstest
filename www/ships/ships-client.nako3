appidは「ships」
wsidは空
envsは{}
CV横は300
CV縦は300

WSアドレスは空
もし、WINDOW["location"]["host"]が「https:」ならば、
　WSアドレスは「wss://{WINDOW["location"]["host"]}/」
違えば、
　WSアドレスは「ws://{WINDOW["location"]["host"]}/」
ここまで
WS受信時には
　　Jデータは対象をJSONデコード
　　Jデータ["type"]で条件分岐
　　　「syn」ならば、
　　　　wsidはJデータ["data"]["wsid"]
　　　　{type:"syn", data:NULL}をコマンド送信。
　　　ここまで
　　　「msg」ならば、
　　　　# 処理🍐
　　　ここまで
　　　「env」ならば、
　　　　envsはJデータ["data"]
　　　　開始する
　　　ここまで
　　　「view」ならば、
　　　　viewはJデータ["data"]
　　　　viewを画面表示
　　　ここまで
　　ここまで
ここまで

WSアドレスへWS接続。

「#startButton」をクリックした時には
　　「#div_preset」の「ボックス表示」に「なし」をDOMスタイル設定
　　「#div_main」の「ボックス表示」に「ブロック」をDOMスタイル設定
　　F名前=「#name」のテキスト取得。
　　{type:"entry",data:{ nick: F名前 }}をコマンド送信。
ここまで。

●(Oを)コマンド送信とは
　MSGは{
　　app: "ships",
　　wsid: wsid,
　　type: O["type"],
　　data: O["data"]
　}
　MSGをJSONエンコードをWS送信
ここまで

●開始とは
　CVは「#cv_main」のDOM要素取得
　CV横はenvs["視界半径"]*2
　CV縦はenvs["視界半径"]*2
　CV["width"]はCV横
　CV["height"]はCV縦
　「#cv_main」へ描画開始
　描画中キャンバスの「背景色」に黒色をDOMスタイル設定。
　描画中キャンバスにキーパッドイベント設定
　星準備
ここまで

●星準備とは
ここまで

●(viewを)画面表示とは
　[0,0,CV横,CV縦]の描画クリア
　緑色に線色設定
　3に線太さ設定
　空に塗色設定
　[envs["視界半径"],envs["視界半径"]]にenvs["視界半径"]の円描画
　キャンバス状態保存
　描画中コンテキスト["textAlign"]は"center"
　描画中コンテキスト["textBaseline"]は"middle"
　星描画
　view["VIEW"]を反復する
　　ITEMはそれ
　　もし、ITEM["type"]が「PL」ならば、
　　　キャンバス状態保存
　　　「{envs["PLサイズ"]}px」に描画フォント設定
　　　[envs["視界半径"]+ITEM["X"],envs["視界半径"]+ITEM["Y"]]に描画起点設定
　　　(ITEM["D"]+envs["PL回転補正"])だけ描画回転
　　　[0,0]にenvs["PL字"]を文字描画
　　　キャンバス状態復元
　　違えばもし、ITEM["type"]が「POTATOS」ならば、
　　　キャンバス状態保存
　　　「{ITEM["サイズ"]}px」に描画フォント設定
　　　[envs["視界半径"]+ITEM["X"],envs["視界半径"]+ITEM["Y"]]に描画起点設定
　　　ITEM["D"]だけ描画回転
　　　[0,0]にITEM["字"]を文字描画
　　　キャンバス状態復元
　　違えばもし、ITEM["type"]が「SHOTS」ならば、
　　　キャンバス状態保存
　　　ITEM["W"]に線太さ設定
　　　黄色に線色設定
　　　X1はITEM["X"]+envs["視界半径"]
　　　Y1はITEM["Y"]+envs["視界半径"]
　　　X2はX1+ITEM["DDX"]×ITEM["L"]
　　　Y2はY1+ITEM["DDY"]×ITEM["L"]
　　　[X1, Y1]から[X2, Y2]へ線描画。
　　　キャンバス状態復元
　　ここまで
　ここまで
　viewを自機描画
　viewをビルボード描画
　キャンバス状態復元
ここまで

●(viewを)自機描画とは
　キャンバス状態保存
　「{envs["PLサイズ"]}px」に描画フォント設定
　[envs["視界半径"],envs["視界半径"]]に描画起点設定
　(view["D"]+envs["PL回転補正"])だけ描画回転
　[0,0]にenvs["PL字"]を文字描画
　キャンバス状態復元
ここまで

●(viewを)ビルボード描画とは
　キャンバス状態保存
　白色に線色設定
　白色に塗色設定
　描画中コンテキスト["textAlign"]は"left"
　描画中コンテキスト["textBaseline"]は"middle"
　「12px」に描画フォント設定
　[4,CV縦-12/2-2]に「SOCRE:{view["SCORE"]}」を文字描画
　描画中コンテキスト["textAlign"]は"right"
　[CV横-4,CV縦-12/2-2]に(「💛」をview["LIFE"]でリフレイン)を文字描画
　キャンバス状態復元
ここまで

●星描画とは
ここまで
# キーパッド機能

# キーコード/コードとボタン番号のマッピング表
# 主ボタンは、0-3がいわゆるボタン、12-15が上下左右
キーマッピングは{
　ArrowDown:13,
　ArrowRight:15,
　ArrowLeft:14,
　ArrowUp:12,
　"40":13,
　"39":15,
　"37":14,
　"38":12,
　"KeyZ":0,
　"KeyX":1,
　"KeyA":2,
　"KeyS":3,
　"90":0,
　"89":1,
　"65":2,
　"83":3,
　"Escape":-1,
　"27":-1
}

ボタン状態は０
キーパッドイベント対象はNULL

●(対象に)キーパッドイベント設定とは
　キーパッドイベント対象は対象
　もし、対象["tagName"]が「CANVAS」ならば、
　　対象["tabIndex"]は0
　　対象の"focus"を[]でJSメソッド実行
　ここまで
　対象の「keydown」に「キー押」をDOMイベント追加
　対象の「keyup」に「キー離」をDOMイベント追加
ここまで

●キーパッドイベント解除とは
　キーパッドイベント対象の「keydown」から「キー押」をDOMイベント削除
　キーパッドイベント対象の「keyup」から「キー離」をDOMイベント削除
ここまで

●キー押すとは
　EVTはWINDOW["event"]
　旧ボタン状態はボタン状態
　もし、EVT["code"]ならば、
　　コードはEVT["code"]
　　キーはキーマッピング[コード]
　違えば、
　　コードはEVT["keyCode"]
　　キーはキーマッピング[コード]
　ここまで
　もし、(キーの変数型確認)が"undefined"でなければ、
　　もし、キー≧０ならば、
　　　値は1をキーでSHIFT_L
　　　ボタン状態はボタン状態と値のOR
　　　もし、ボタン状態≠旧ボタン状態ならば、
　　　　MSGは{type:"control",data:ボタン状態}
　　　　MSGをコマンド送信。
　　　ここまで
　　違えば、
　　　MSGは{type:"quit",data:NULL}
　　　MSGをコマンド送信。
　　ここまで
　　EVTのDOMイベント処理停止
　ここまで
ここまで

●キー離すとは
　EVTはWINDOW["event"]
　旧ボタン状態はボタン状態
　もし、EVT["code"]ならば、
　　コードはEVT["code"]
　　キーはキーマッピング[コード]
　違えば、
　　コードはEVT["keyCode"]
　　キーはキーマッピング[コード]
　ここまで
　もし、(キーの変数型確認)が"undefined"でなければ、
　　もし、キー≧０ならば、
　　　値は1をキーでSHIFT_LのNOT
　　　ボタン状態はボタン状態と値のAND
　　　もし、ボタン状態≠旧ボタン状態ならば、
　　　　MSGは{type:"control",data:ボタン状態}
　　　　MSGをコマンド送信。
　　　ここまで
　　　EVTのDOMイベント処理停止
　　ここまで
　ここまで
ここまで
