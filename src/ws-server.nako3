#--- WebSocketの指定 ---
WSクライアントリストは{}
WSクライアントIDは0
WSアプリケーションリストは{}

!「app-chat.nako3」を取り込む
!「app-ships.nako3」を取り込む

●(PORTで)WSサーバ設定とは
　WSサーバ起動成功した時には
　　「● WebSocketサーバを起動しました」と表示。
　　４秒毎には
　　　　廃品回収
　　ここまで
　ここまで
　WSサーバ起動失敗した時には
　　「WebSocketサーバの起動に失敗しました」と表示。
　ここまで
　WSサーバ接続した時には
　　IP=対象["connection"]["remoteAddress"]
　　#「クライアント{IP}が接続しました」と表示。
　　WSデータはWSソケットをWSクライアント登録
　　MSGは{type:"syn",data:{wsid:WSデータ["ID"]}}
　　MSGをWSソケットにコマンド個別送信
　ここまで
　WSサーバ受信時には
　　WSソケットの対象を基本処理する
　ここまで
　WSサーバピン時には
　　WSクライアントはWSソケットをクライアント検索
　　もし、WSクライアント≠NULLならば、
　　　WSクライアント["最終受信日時"]は時間ミリ秒取得
　　　#「PING<{WSクライアント["ID"]}」を表示
　　　#「PONG>{WSクライアント["ID"]}」を表示
　　ここまで
　　WSソケットに空をWSサーバポン送信
　ここまで
　WSサーバポン時には
　　WSクライアントはWSソケットをクライアント検索
　　もし、WSクライアント≠NULLならば、
　　　WSクライアント["最終受信日時"]は時間ミリ秒取得
　　　#「PONG<{WSクライアント["ID"]}」を表示
　　ここまで
　ここまで
　WSサーバ閉じた時には
　　WSソケットを破棄処理する
　ここまで
　PORTでWSサーバ起動。
ここまで

●(Wを)WSクライアント登録とは
　IDはWSクライアントID
　WSクライアントIDはWSクライアントID+1
　WSは{}
　WS["WS"]はW
　WS["ID"]はID
　WS["最終受信日時"]は時間ミリ秒取得
　WSクライアントリスト[ID]はWS
　WSで戻る
ここまで

●(Oを)コマンド全送信とは
　MSGはOをJSONエンコード
　#「ALL>>{MSG}」を表示
　MSGをWSサーバ全送信。
ここまで

●(OをAPPへ)コマンド全APP送信とは
　MSGはOをJSONエンコード
　#「{APP}>>{MSG}」を表示
　WSクライアントリストを反復する
　　WSクライアントはそれ
　　もし、WSクライアント["appid"]がAPPならば、
　　　MSGをWSクライアント["WS"]にWSサーバ個別送信する
　　ここまで
　ここまで
ここまで

●(OをWSに)コマンド個別送信とは
　MSGはOをJSONエンコード
　#「PRV>>{MSG}」を表示
　MSGをWSにWSサーバ個別送信
ここまで

●(WSを)クライアント検索とは
　WSクライアントリストを反復する
　　WSクライアントはそれ
　　もし、WSクライアント["WS"]＝WSならば、
　　　WSクライアントで戻る
　　ここまで
　ここまで
　NULLで戻る
ここまで

●(WSを)破棄処理とは
　WSクライアントはWSをクライアント検索
　もし、WSクライアント≠NULLならば、
　　IDはWSクライアント["ID"]
　　WSの({type:"close",app:WSクライアント["appid"],wsid:ID,data:NULL}をJSONエンコード)を基本処理
　　WSクライアントリストからIDを辞書キー削除
　ここまで
ここまで

●(WSのDを)基本処理とは
　#「受信:{D}」と表示。
　JデータはDをJSONデコード
　IDはJデータ["wsid"]
　WSデータはWSクライアントリスト[ID]
　もし、WSデータ["WS"]≠WSならば、
　　「クライアントからの要求ID不一致」と表示。
　　戻る
　ここまで
　WSデータ["最終受信日時"]は時間ミリ秒取得
　もし、Jデータ["type"]が「syn」ならば、
　　WSデータ["appid"]はJデータ["app"]
　違えば、
　　もし、WSアプリケーションリストにJデータ["app"]が辞書キー存在ならば、
　　　FUNCはWSアプリケーションリスト[Jデータ["app"]]
　　　FUNC(WSデータ,Jデータ)
　　ここまで
　ここまで
ここまで

●廃品回収とは
　今ミリ秒は時間ミリ秒取得
　WSクライアントリストを反復する
　　WSクライアントはそれ
　　差は今ミリ秒-WSクライアント["最終受信日時"]
　　もし、差＞10000ならば、
　　　WSクライアント["WS"]をWSサーバ個別閉じる
　　違えばもし、差＞5000ならば、
　　　#「PING>{WSクライアント["ID"]}」を表示
　　　WSクライアント["WS"]に空をWSサーバピン送信
　　ここまで
　ここまで
ここまで

●時間ミリ秒取得とは
　「Date.now()」をJS実行で戻る
ここまで

●(FUNCをAPPIDに)アプリケーション登録とは
　WSアプリケーションリスト[APPID]はFUNC
ここまで
